package MultiTreadingInfo.Semaphore.Two;
/**
 * Для управления доступом к ресурсу семафор использует счетчик, представляющий количество разрешений.
 * Если значение счетчика больше нуля, то поток получает доступ к ресурсу, при этом счетчик уменьшается на единицу.
 * После окончания работы с ресурсом поток освобождает семафор, и счетчик увеличивается на единицу.
 * Если же счетчик равен нулю, то поток блокируется и ждет, пока не получит разрешение от семафора.
 *
 * Установить количество разрешений для доступа к ресурсу можно с помощью конструкторов класса Semaphore:
 *
 * Semaphore(int permits)
 * Semaphore(int permits, boolean fair)
 *
 * Параметр permits указывает на количество допустимых разрешений для доступа к ресурсу.
 * Параметр fair во втором конструкторе позволяет установить очередность получения доступа.
 * Если он равен true, то разрешения будут предоставляться ожидающим потокам в том порядке,
 * в каком они запрашивали доступ. Если же он равен false, то разрешения будут предоставляться в неопределенном порядке.
 *
 *
 * Для получения разрешения у семафора надо вызвать метод acquire(), который имеет две формы:
 *
 * void acquire() throws InterruptedException
 * void acquire(int permits) throws InterruptedВxception
 *
 * Для получения одного разрешения применяется первый вариант, а для получения нескольких разрешений - второй вариант.
 * После вызова этого метода пока поток не получит разрешение, он блокируется.
 * После окончания работы с ресурсом полученное ранее разрешение надо освободить с помощью метода release():
 *
 * void release()
 * void release(int permits)
 * Первый вариант метода освобождает одно разрешение, а второй вариант - количество разрешений, указанных в permits.
 */
public class SemaphoreInfo {
}
